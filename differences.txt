4,5c4,5
<     game_over = False
<     game_quit = False
---
>     gameOver = False
>     gameQuit = False
12c12
<     # groups sprites together
---
>     # groups sprites together?
24,25c24,25
<     retbutton_image,retbutton_rect = load_image('replay_button.png',35,31)
<     gameover_image,gameover_rect = load_image('game_over.png',190,11)
---
>     retbutton_image,retbutton_rect = load_image('replay_button.png',35,31,-1)
>     gameover_image,gameover_rect = load_image('game_over.png',190,11,-1)
28c28
<     temp_images,temp_rect = load_sprites('numbers.png',12,1,11,int(11*6/5))
---
>     temp_images,temp_rect = load_sprite_sheet('numbers.png',12,1,11,int(11*6/5),-1)
31c31
<     HI_image.fill(background_color)
---
>     HI_image.fill(background_col)
39c39
<     while not game_quit:
---
>     while not gameQuit:
42,43c42,43
<         while not game_over:
<             if pygame.display.get_surface() == None: # can be removed?
---
>         while not gameOver:
>             if pygame.display.get_surface() == None:
45,47c45,46
<                 game_quit = True
<                 game_over = True
<                 break
---
>                 gameQuit = True
>                 gameOver = True
51,52c50,51
<                         game_quit = True
<                         game_over = True
---
>                         gameQuit = True
>                         gameOver = True
103,109c102,136
<         if pygame.display.get_surface() is None:
<             print("Couldn't load display surface")
<             game_quit = True
<         else:
<             for event in pygame.event.get():
<                 if event.type == pygame.QUIT:
<                     game_quit = True
---
>             # creates
>             if len(clouds) < 5 and random.randrange(0,300) == 10:
>                 Cloud(width,random.randrange(height/5,height/2))
> 
>             playerDino.update()
>             cacti.update()
>             pteras.update()
>             clouds.update()
>             new_ground.update()
>             scb.update(playerDino.score)
>             highsc.update(high_score)
> 
>             if pygame.display.get_surface() != None:
>                 screen.fill(background_col)
>                 new_ground.draw()
>                 clouds.draw(screen)
>                 scb.draw()
>                 if high_score != 0:
>                     highsc.draw()
>                     screen.blit(HI_image,HI_rect)
>                 cacti.draw(screen)
>                 pteras.draw(screen)
>                 playerDino.draw()
> 
>                 pygame.display.update()
>             clock.tick(FPS)
> 
>             if playerDino.isDead:
>                 gameOver = True
>                 if playerDino.score > high_score:
>                     high_score = playerDino.score
> 
>             if counter%700 == 699:
>                 new_ground.speed -= 1
>                 gamespeed += 1
111,112c138
<             screen.fill(background_color)
<             new_ground.draw()
---
>             counter = (counter + 1)
114c140,171
<             pygame.display.update()
---
>         if gameQuit:
>             break
> 
>         while gameOver:
>             if pygame.display.get_surface() == None:
>                 print("Couldn't load display surface")
>                 gameQuit = True
>                 gameOver = False
>             else:
>                 for event in pygame.event.get():
>                     if event.type == pygame.QUIT:
>                         gameQuit = True
>                         gameOver = False
>                     if event.type == pygame.KEYDOWN:
>                         if event.key == pygame.K_ESCAPE:
>                             gameQuit = True
>                             gameOver = False
> 
>                         if event.key == pygame.K_RETURN or event.key == pygame.K_SPACE:
>                             gameOver = False
>                             gameplay()
>             highsc.update(high_score)
>             if pygame.display.get_surface() != None:
>                 disp_gameOver_msg(retbutton_image,gameover_image)
>                 if high_score != 0:
>                     highsc.draw()
>                     screen.blit(HI_image,HI_rect)
>                 pygame.display.update()
>             clock.tick(FPS)
> 
>     pygame.quit()
>     quit()
